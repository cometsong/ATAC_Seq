#!/usr/bin/env nextflow
//====================  Nextflow/Container Config  ==========

manifest {
    name = "ATAC_Seq"
    description = 'ATAC_Seq local images convert change pipeline.'
    author = 'Mike Lloyd, Benjamin Leopold'
    mainScript = "main.nf"
    nextflowVersion = '!>=20.04.0'
    version = "0.8.85"
}

////// Included Default Config Settings \\\\\\
def simgPath  = "$projectDir/images"

//NOTE: -c params.config  // presume passed before 'run' for ALL user param mods!!
params.email = params.email ?: "DEBUG-DEFAULT-TBD@jax.org"
params.outputDir = params.outputDir ?: "${manifest.name}_results"
params.ATACSupportFiles = simgPath //default path for all images

// Include JAX Universal Config Settings
univcfg = new File("$projectDir/universal.config")
if (univcfg.canRead()) { includeConfig univcfg }
else {
    profiles {
        standard { process.executor = "local" }
        sumner {
            process.executor = "slurm"
            process.module = "slurm"
            process.clusterOptions = "-q batch"
        }
    }
}

params { // General software configs:
  cutadaptMinLength  = 20
  cutadaptQualCutoff = 20
  cutadaptAdapterR1  = "CTGTCTCTTATACACATCTCCGAGCCCACGAGAC"
  cutadaptAdapterR2  = "CTGTCTCTTATACACATCTGACGCTGCCGACGA"

  bowtieVSensitive   = true // == -D 20 -R 3 -N 0 -L 20 -i S,1,0.50
  bowtieMaxInsert    = 1000 // -X

  //samtoolsUsesTooManyOptions = true // ACK!
}

process {
    errorStrategy = { task.attempt <= 2 ? "retry" : "finish" } // retry<=2 : 3 tries

    time = { 6.hour * task.attempt }
    memory = { 15.GB * task.attempt }

    sifs = simgPath
    //FIXME: some of these SIFs need mods for unix-based timekeeping requirements
    withLabel: bowtie2   { container = "file://${sifs}/bowtie2_2.3.5.sif"                     // TODO:check UNIX
                           time = { 15.hour * task.attempt }
                           memory = { 16.GB * task.attempt }
                           }
    sithLabel: bedtools  { container = "file://${sifs}/bedtools_v2.9.2_bash_utils.sif" }      // HAS:UNIX
    withLabel: cutadapt  { container = "file://${sifs}/cutadapt_2.3.sif" }                    // TODO:check UNIX
    withLabel: deeptools { container = "file://${sifs}/deeptools_3.3.2.sif" }                 // TODO:check UNIX
    withLabel: fastqc    { container = "file://${sifs}/fastqc_0.11.9.sif" }                   // TODO:check UNIX
    withLabel: g2gtools  { container = "file://${sifs}/g2gtools_0.1.31_atac_adjustment.sif" } // HAS:UNIX
    withLabel: gatk      { container = "file://${sifs}/gatk_v4.1.4.1.sif"                     // HAS:UNIX
                           memory = { 20.GB * task.attempt }
                           }
    withLabel: logparser { container = "file://${sifs}/LogParser_v2.sif" }                    // TODO:check UNIX on 'python'
    withLabel: macs2     { container = "file://${sifs}/macs2_2.2.7.1.sif" }                   // TODO:check UNIX on 'python'
    withLabel: r_lang    { container = "file://${sifs}/R_3.6.2.sif" }                         // TODO:check UNIX on 'r'
    withLabel: samtools  { container = "file://${sifs}/samtools_1.3.1_bash_utils.sif" }       // HAS:UNIX
    withLabel: subread   { container = "file://${sifs}/subread_1.6.4.sif" }                   // TODO:check UNIX
    withLabel: utils     { container = "file://${sifs}/bash-utils-alpine__v3.11.sif" }        // HAS:UNIX

}

//FIXME: determine which unix-based NXF features can be re-enabled (timeline/report/etc) w/o bash/ps/uname/etc
notification {
    enabled = false // true
    to = params.email
    from = "nxf-${manifest.name}"
}

singularity {
    enabled = true
    process.module = "singularity"
    cacheDir = "${simgPath}/cache"
    autoMounts = true
    runOptions = ''
    engineOptions = ''
}

env {
    NXF_ANSI_SUMMARY = true
    NXF_ANSI_LOG = true
    NXF_DEBUG = 2
}

timeline {
    enabled = false // true
    file = "${params.outputDir}/nxf_status/timeline.html"
}

report {
    enabled = false // true
    file = "${params.outputDir}/nxf_status/report.html"
}

weblog {
    enabled = false // true
}

trace {
    enabled = false // true
    file = "${params.outputDir}/nxf_status/trace.txt"
    fields = ""\
       + "task_id,"   \
       + "hash,"      \
       + "process,"   \
       + "tag,"       \
       + "status,"    \
       + "exit,"      \
       + "start,"     \
       + "container," \
       + "cpus,"      \
       + "time,"      \
       + "disk,"      \
       + "memory,"    \
       + "duration,"  \
       + "realtime,"  \
       + "queue,"     \
       + "%cpu,"      \
       + "%mem,"      \
       + "rss,"       \
       + "vmem,"      \
       + "rchar,"     \
       + "wchar"
    }

// vim: set ft=groovy.nextflow ts=4 sw=0 tw=100 et fdm=syntax:
